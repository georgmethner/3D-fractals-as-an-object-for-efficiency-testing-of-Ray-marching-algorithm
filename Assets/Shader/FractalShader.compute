// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float2 complexMultiply(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float fractal(float2 px)
{
    float2 z = 0.0.xx;
    
    for (int i = 0; i < 128; i++)
    {
        //z = (z * z) + (px.x + px.y);
        z = complexMultiply(z, z) + px;
    }
    
    if (length(z) > 2.)
        return 0;
    
    return 1;
}

float2 _Pixel;
float2 _PixelOffset;
float _Value;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    //GroupMemoryBarrierWithGroupSync();
    // Transform pixel to [-1,1] range
    float2 uv = float2(((_Pixel.xy + _PixelOffset) / float2(width, height)) * _Value * 2.0f - 1.0f);

    Result[id.xy] = fractal(uv).xxxx;
}
